<?php/* * @author Shukurullo Odilov * @link telegram: https://t.me/yii2_dasturchi * @date 24.07.2021, 10:06 */namespace soft\db;use Yii;use yii\data\Pagination;use yii\db\ActiveRecord;use yii\db\ActiveQuery as YiiActiveQuery;use yii\db\Expression;/** * This is the query class for ActiveRecord * * @property string $tableName */class ActiveQuery extends YiiActiveQuery{    private $_tableName;    use MultilingualQueryTrait;    /**     * @return string     */    public function getTableName()    {        if ($this->_tableName == null) {            /* @var $modelClass ActiveRecord */            $modelClass = $this->modelClass;            $this->tableName = $modelClass::tableName();        }        return $this->_tableName;    }    /**     * @param string $tableName     */    public function setTableName($tableName)    {        $this->_tableName = $tableName;    }    /**     * Generates attribute name with table name.     * @param $attribute     * @return string     */    public function generateAttributeName($attribute)    {        return $this->tableName . '.' . $attribute;    }    /**     * @return $this     */    public function active()    {        return $this->andWhere([$this->generateAttributeName('status') => 1]);    }    /**     * @return $this     */    public function deleted($attribute = 'is_delted')    {        return $this->andWhere([$this->generateAttributeName($attribute) => true]);    }    /**     * @return $this     */    public function nonDeleted($attribute = 'is_delted')    {        return $this->andWhere([$this->generateAttributeName($attribute) => true]);    }    /**     * @param int $limit     * @return $this     */    public function latest($limit = 0, $attribute = 'created_at')    {        $this->addOrderBy([$this->generateAttributeName($attribute) => SORT_DESC]);        if ($limit > 0) {            $this->limit($limit);        }        return $this;    }    /**     * @param string $id     * @return $this     */    public function id($id, $attribute = 'id')    {        return $this->andWhere([$this->generateAttributeName($attribute) => $id]);    }    /**     * @param string $id     * @return $this     */    public function notId($id, $attribute = 'id')    {        return $this->andWhere(['!=', $this->generateAttributeName($attribute), $id]);    }    /**     * @param string $slug     * @return $this     */    public function slug($slug, $attribute = 'slug')    {        return $this->andWhere([$this->generateAttributeName($attribute) => $slug]);    }    /**     * @param int $limit     * @return $this     */    public function random($limit = 0)    {        $this->orderBy(new Expression('rand()'));        if ($limit > 0) {            $this->limit($limit);        }        return $this;    }    /**     * @param $relation     * @return $this     */    public function without($relation)    {        if (!empty($this->with) && is_array($this->with)) {            foreach ($this->with as $key => $value) {                if (is_int($key)) {                    if ($relation == $value) {                        unset($this->with[$key]);                        break;                    }                } else {                    if ($relation == $key) {                        unset($this->with[$key]);                        break;                    }                }            }        }        return $this;    }    /**     * Bugungi sanadagi ma'lumotlarni ajratib oladi     * @param string $attribute bazadan qaysi attribute bo'yicha ajratib olish kerakligi     * @return $this     */    public function today($attribute = 'created_at')    {        $begin = strtotime('today');        $end = strtotime('tomorrow');        $attribute = $this->generateAttributeName($attribute);        return $this->andWhere(['>=', $attribute, $begin])            ->andWhere(['<', $attribute, $end]);    }    public function todayDate($attribute = 'date')    {        $begin = date("Y-m-d", strtotime('today'));        $end = date("Y-m-d", strtotime('tomorrow'));        $attribute = $this->generateAttributeName($attribute);        return $this->andWhere(['>=', $attribute, $begin])            ->andWhere(['<', $attribute, $end]);    }    public function fromDate($date, $attribute)    {        $attribute = $this->generateAttributeName($attribute);        return $this->andWhere(['>=', $attribute, $date]);    }    public function toFDate($date, $attribute)    {        $attribute = $this->generateAttributeName($attribute);        return $this->andWhere(['<', $attribute, $date]);    }    /**     * Bazadan shu sanagacha bo'lgan ma'lumotlarni ajratib olish     * @param $date int sana timestamp formatda     * @param $includeThisDay bool whether include given day     * @param string $attribute qaysi attribute bo'yicha ajratib olish kerakligi     */    public function toDate($date = null, $attribute = 'created_at', $includeThisDay = true)    {        if ($date != null) {            $date = Yii::$app->formatter->asTimestamp($date);            $day = strtotime(date('Y-m-d', $date));            if ($includeThisDay) {                $time = strtotime('+1 day', $day);            } else {                $time = $day;            }            $attribute = $this->generateAttributeName($attribute);            return $this->andWhere(['<', $attribute, $time]);        }        return $this;    }    /**     * Bazadan aynan berilgan sanadagi ma'lumotlarni ajratib olish     * @param $date int sana timestamp formatda     * @param string $attribute qaysi attribute bo'yicha ajratib olish kerakligi     */    public function day($date = null, $attribute = 'created_at')    {        if ($date != null) {            /** @var int Kunning boshlanishi */            $dayBegin = strtotime(date('Y-m-d', $date));            /** @var int Ertasi kunning boshlanishi */            $dayEnd = strtotime('+1 day', $dayBegin);            $attribute = $this->generateAttributeName($attribute);            return $this->andWhere(['>=', $attribute, $dayBegin])                ->andWhere(['<', $attribute, $dayEnd]);        }        return $this;    }    public function dayF($date = null, $attribute = 'created_at')    {        if ($date != null) {            /** @var int Kunning boshlanishi */            $dayBegin = $date;            /** @var int Ertasi kunning boshlanishi */            $dayEnd = date("Y-m-d", strtotime('+1 day', strtotime($dayBegin)));            $attribute = $this->generateAttributeName($attribute);            return $this->andWhere(['>=', $attribute, $dayBegin])                ->andWhere(['<', $attribute, $dayEnd]);        }        return $this;    }    /**     * Berilgan oraliqdagi ma'lumotlarni saralab olish     * @param $from int Timestamp formatidagi sana     * @param $to int Timestamp formatidagi sana     * @param string $attribute     */    public function range($from, $to, $attribute = 'created_at')    {        $attribute = $this->generateAttributeName($attribute);        return $this->andWhere(['>=', $attribute, $from])            ->andWhere(['<', $attribute, $to]);    }}?>